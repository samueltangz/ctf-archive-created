

# This file was *autogenerated* from the file collide.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1337 = Integer(1337); _sage_const_256 = Integer(256); _sage_const_8 = Integer(8); _sage_const_100 = Integer(100); _sage_const_200 = Integer(200); _sage_const_109 = Integer(109); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_12 = Integer(12)
p = int(input('p = '))
g = _sage_const_1337 

def hash(m):
    m = int.from_bytes(b'SECUREHASH_' + m, 'big')
    return int(pow(g, m, p)).to_bytes(_sage_const_256 //_sage_const_8 , 'big')


# (x0 + 109) + 256 * (x1 + 109) + 256^2 * (x2 + 109) + ... + 256^(k-1) * (x(k-1) + 109) + 256^k * m0 = v (mod p-1)
m0 = int.from_bytes(b'SECUREHASH_', 'big')
v = int.from_bytes(b'SECUREHASH_pleasegivemetheflag', 'big')

for l in range(_sage_const_100 , _sage_const_200 ):
    print(f'[ ] Trying {l = }...')
    s = int((sum(_sage_const_256 **i * _sage_const_109  for i in range(l)) + _sage_const_256 **l * m0 - v) % (p-_sage_const_1 ))
    '''
    [s          1  0  0 ... 0] <-- 1
    [256^(k-1)  0  1  0 ... 0] <-- x(k-1)
    [256^(k-2)  0  0  1 ... 0] <-- x(k-2)
    [               ...      ]     ...
    [256^0      0  0  0 ... 1] <-- x0
    [p-1        0  0  0 ... 0] <-- *
    '''
    weights = [_sage_const_256 ] + [_sage_const_1  for _ in range(l+_sage_const_1 )]

    A = Matrix(l+_sage_const_2 , l+_sage_const_2 )
    Q = diagonal_matrix(weights)

    # First column
    A[_sage_const_0 , _sage_const_0 ] = s
    A[l+_sage_const_1 , _sage_const_0 ] = p-_sage_const_1 
    for i in range(l): A[i+_sage_const_1 , _sage_const_0 ] = _sage_const_256 **(l-_sage_const_1 -i)

    # The remaining columns
    for i in range(l+_sage_const_1 ): A[i, i+_sage_const_1 ] = _sage_const_1 

    A *= Q
    A = A.LLL()
    A /= Q

    for row in A:
        if row[_sage_const_0 ] != _sage_const_0 : continue
        if row[_sage_const_1 ] < _sage_const_0 : row = -row
        if row[_sage_const_1 ] != _sage_const_1 : continue
        m = row[_sage_const_2 :] # centered by 109

        if min(m) < -_sage_const_12 : continue
        if max(m) > _sage_const_12 : continue

        m = bytes(_sage_const_109  + mc for mc in row[_sage_const_2 :]).decode()
        print(f"[*] '{m}' has the same hash with 'pleasegivemetheflag'")
        assert False, "Collision found!"
    

