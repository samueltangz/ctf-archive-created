from gmpy2 import iroot

# return integer roots of ax^2 + bx + c = 0
def quadratic(a, b, c):
    d = b**2 - 4*a*c
    if d < 0:
        return []
    elif d == 0:
        if -b % (2*a) != 0: return []
        return [-b // (2*a)]
    else:
        rd, ok = iroot(d, 2)
        if not ok: return []
        roots = []
        if (-b - rd) % (2*a) == 0:
            roots.append(int((-b - rd) // (2*a)))
        if (-b + rd) % (2*a) == 0:
            roots.append(int((-b + rd) // (2*a)))
        return roots

assert quadratic(1, 2, 1) == [-1]
assert quadratic(1, -3, 2) == [1, 2]

n = 104761374953173292488929744863165210794654068795777885288141577481002622221368522222345141465054888216685195323019389786561685227925970380642821816770602985472200153940453825122714968250922188816858014096712757866955919806714643962473332876738158067418215518151671679136192434497079441504252290233276785611599
e = 65537
c = 65928964054587881283125968144498292857628864173177955118556976763155079656459679077792117840779590338576427244089037717506889027748698067761926112680228885555444571382015302945365206338671155793788123643640188995655372264100530540193424123290247632274913224252938261740392478884552717293366009033122985923910
s = 5142613903784744424286082317496829116877907073407033860339838239164453521174213069438631369864823275015906330523317080155171707469704307761287329022024572
t = 7967501076725747803058232903884621217031867311480596291389476854702834454579805205282313799601751011483434096767204486104203547013606991412953137405179501
# d = s*p + t
# (k + e*s) * p**2 + (e*t - 1 - k*(n+1)) * p + k*n == 0

p = None
for k in range(1, e+1):
    rts = quadratic(k + e*s, e*t - 1 - k*(n+1), k*n)
    if len(rts) == 0: continue
    for rt in rts:
        if n % rt != 0: continue        
        p = rt
    if p is not None: break
else:
    assert False, "p not found"

q = n // p
phi_n = (p-1) * (q-1)
d = pow(e, -1, phi_n)

m = pow(c, d, n)
m = int.to_bytes(m, (m.bit_length()+7)//8, 'big')
print(m)